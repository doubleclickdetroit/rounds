  LOGIN
  the user starts up the app and sees a loading screen
    - ***** FACEBOOK MAGIC *****
    - ***** APP LOGIN (DEVISE) *****

  FEED
  (the user is now logged in) 
  the user lands on an random feed tab (either write or draw), in the following case, write
  shown in the feed are invitations, friends recent pictures, and recent community pictures
_   - GET /api/pictures # unimplemented
      # aggregation equivalent to the following
_     - GET /api/pictures/invitations # relative to logged in user
X     - GET /api/pictures/friends     # relative to logged in user
X     - GET /api/pictures/recent

  FEED UPDATE
  the user sees 8 recent contributions by his friends and swipes through all of them, at which point 8 more are loaded
_   - GET /api/pictures/friends?time=time_of_last_slide_in_first_eight

  CREATE A SLIDE
  user sees a picture he likes and clicks to create the next sentence
    - not ironed out yet, but probably something like this:
_     - POST /api/rounds/:round_id/ {} # creates RoundLock
  the user creates the slide and submits it
_   - POST /api/rounds/:round_id/sentences {:sentence => {...}} # checks for RoundLock (which permits user to create Slide) destroys it and creates the slide
    # destroys round lock
      # destroys waiting list

  CREATE A ROUND
  the user then clicks '+' to create a new round, chooses to draw a picture, draws, and submits it
*   #create round
*   #create round lock
_   - POST /api/rounds/
*   #create picture
_   - POST /api/rounds/:round_id/pictures {:picture => {...}} # needs to ignore the need for RoundLock for an empty round...
    # destroys round lock
      # destroys waiting list

  CREATE A COMMENT
  the user finds himself back on the feed, sees a slide he likes, clicks to view it, then clicks comment, enters text, and submits
X   - POST /api/slides/:slide_id/comments {:comment => {...}} 

  BLOCK A USER
  the user finds himself back on his feed and sees something he doesnt care for from a user. he clicks to user, block, and confirms
X   - POST /api/users/block/:facebook_id # unimplemented

  WATCH A SLIDE
  # todo watch a slide timeout
  # todo watch a slide spoiler
  the user sees a slide he wants to add to, but when he goes to add the next slide, its locked. 
  he's asked if he wants to watch the round to see if the user takes to long to finish and confirms
_   - POST /api/slides/:slide_id/watchers # facebook id derived from current_user # unimplemented

  SEND AN INVITATION
_ ????????????????????????????????????????????
  ????????????????????????????????????????????




assumptions: user must first have a roundlock to create a slide for the round

question: what about comments in feeds? completed rounds?

missing in wires: 
  completed round view
  watch round confirm dialog

Models:
  round
  slide
  comment
  watch
  invitation
  blacklist
